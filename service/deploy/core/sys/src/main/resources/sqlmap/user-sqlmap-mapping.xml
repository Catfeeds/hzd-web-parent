<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="com.exiao.platform.core.sys.data.User">
    <!--  
	<cache type="org.mybatis.caches.ehcache.LoggingEhcache" readOnly="true" />
	-->
	<resultMap id="BaseResultMap" type="com.exiao.platform.core.sys.data.User">
		<id column="id" property="id" jdbcType="INTEGER" />
		<result column="login_name" property="loginName" jdbcType="VARCHAR" />
		<result column="password" property="password" jdbcType="VARCHAR" />
		<result column="confirm_password" property="confirmPassword" jdbcType="VARCHAR" />
		<result column="user_name" property="userName" jdbcType="VARCHAR" />
		<result column="deparment_id" property="departmentId" jdbcType="INTEGER" />
		<result column="email" property="email" jdbcType="INTEGER" />
		<result column="phone" property="phone" jdbcType="VARCHAR" />
		<result column="mobile" property="mobile" jdbcType="VARCHAR" />
		<result column="user_type" property="userType" jdbcType="TINYINT" />
		<result column="role_id" property="roleID" jdbcType="INTEGER" />
		<result column="login_ip" property="loginIp" jdbcType="VARCHAR" />
		<result column="salt" property="salt" jdbcType="VARCHAR" />
	    <result column="login_date" property="loginDate" jdbcType="DATE" />
		<result column="create_by" property="createBy" jdbcType="INTEGER" />
		<result column="update_by" property="updateBy" jdbcType="INTEGER" />
		<result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
        <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
        <result column="logical_del" property="logicalDel" jdbcType="TINYINT" />
        <result column="locked" property="locked" jdbcType="TINYINT" />
	</resultMap>
	
	<sql id="Base_Column_List">
		id as id,
		login_name as loginName,
		password as password, 
		confirm_password as confirmPassword,
		salt as salt,
		user_name as userName,
		deparment_id as departmentId,
		email as email,
		phone as phone,
		mobile as mobile,
		user_type as userType,
		role_id as roleID,
		login_ip as loginIp,
		login_date as loginDate,
		create_by as createBy,
		update_by as updateBy,
		create_time as createTime,
		update_time as updateTime,
		logical_del as logicalDel,
		locked
	</sql>
	
	
	<sql id="Base_Where_Clause">
		<where>
			<trim prefixOverrides="and">
				<if test="id != null"> and id = #{id}</if>
				<if test="loginName != null">and login_name = #{loginName}</if>
				<if test="userName != null">and user_name = #{userName}</if>
				<if test="departmentId != null">and deparment_id = #{departmentId}</if>
				<if test="email != null">and email = #{email}</if>
				<if test="mobile != null">and mobile = #{mobile}</if>
				<if test="roleID != null">and role_id = #{roleID}</if>
				<if test="logicalDel != null">and logical_del = #{logicalDel}</if>	
				<if test="locked != null">and locked = #{locked}</if>		
					
				<!-- 模糊查询 -->
				<if test="loginNameLike != null">and login_name like CONCAT("%",#{loginNameLike},"%")</if>
				<if test="userNameLike != null">and user_name like CONCAT("%",#{userNameLike},"%")</if>
			</trim>
		</where>
		<if test="sorting != null">order by ${sorting}</if>
		
	</sql>
	
	<!-- 查询总数 -->
	<select id="selectCount" resultType="java.lang.Long" parameterType="java.util.Map">
		select count(id)
		from sys_user
		<include refid="Base_Where_Clause" />
	</select>
	
	<!-- 查询 -->
	<select id="select" resultMap="BaseResultMap" parameterType="java.util.Map">
		select
		<include refid="Base_Column_List" />
		from sys_user
		<include refid="Base_Where_Clause" />
		<if test="pageNo != null and pageSize != null">
			limit #{pageNo},#{pageSize}
		</if>
	</select>
	
	<select id="queryById" resultMap="BaseResultMap" parameterType="int">
		SELECT
		id,
		login_name ,
		password ,
		confirm_password, 
		salt,
		user_name ,
		deparment_id ,
		email ,
		phone ,
		mobile ,
		user_type ,
		role_id ,
		login_ip ,
		login_date,
		create_time,
		update_time ,
		logical_del,
		locked
		FROM sys_user
		WHERE id = #{id} 
	</select>
	
	<select id="getAll" resultMap="BaseResultMap">
		SELECT
		id,
		login_name ,
		password , 
		confirm_password,
		user_name ,
		salt,
		deparment_id ,
		email ,
		phone ,
		mobile ,
		user_type ,
		role_id ,
		login_ip ,
		login_date,
		create_time,
		update_time ,
		logical_del,
		locked
		FROM sys_user  where logical_del=0 
	</select>
	
	
	<select id="getUserListByIds" resultMap="BaseResultMap" >
		SELECT
		id,
		login_name ,
		password , 
		confirm_password,
		user_name ,
		salt,
		deparment_id ,
		email ,
		phone ,
		mobile ,
		user_type ,
		role_id ,
		login_ip ,
		login_date,
		create_time,
		update_time ,
		logical_del,
		locked
		FROM sys_user  where  logical_del=0  and id in
		 <foreach item="item" index="index" collection="array" 
                         open="(" separator="," close=")">
                        #{item}
         </foreach>
	</select>
	
	<!-- 根据ID查询 -->
	<select id="selectById" resultMap="BaseResultMap" parameterType="java.lang.String">
		select
		<include refid="Base_Column_List" />
		from sys_user
		where id = #{id}
	</select>
	
	<!-- 根据ID查询 -->
	<select id="getUserByloginName" resultMap="BaseResultMap" parameterType="java.lang.String">
		select
		<include refid="Base_Column_List" />
		from sys_user
		where login_name = #{loginName}  and  logical_del=0 and locked=0 
	</select>
	
	<!-- 根据ID删除 -->
	<delete id="deleteById" parameterType="java.util.List">
		delete from sys_user
		where id = #{id} 
		<!-- <foreach collection="list" item="idList"  open="(" separator="," close=")">  
        	#{idList}  
     	</foreach>   -->
	</delete> 
	
	<!-- 删除 -->
	<delete id="delete" parameterType="java.util.Map">
		delete from sys_user
		<include refid="Base_Where_Clause" />
	</delete>

	<!-- 添加 -->	
	<insert id="insert" useGeneratedKeys="true" keyProperty="id"  parameterType="com.exiao.platform.core.sys.data.User">
		insert into sys_user(
			id, 
		    login_name ,
		    password ,
		    confirm_password,
		    salt, 
		    user_name ,
		    deparment_id ,
		    email ,
		    phone ,
		    mobile ,
		    user_type ,
		    role_id ,
		    login_ip ,
		    login_date,
		    create_by,
		    create_time,
		    update_time ,
		    logical_del,
		    locked
		)
		values (
			#{id}, 
			#{loginName},
			#{password},
			#{confirmPassword},
			#{salt},
			#{userName}, 
			#{departmentId}, 
			#{email},
			#{phone}, 
			#{mobile}, 
			#{userType}, 
			#{roleID}, 
			#{loginIp}, 
			#{loginDate}, 
			#{createBy},
			#{createTime},
			#{updateTime},
			#{logicalDel},
			#{locked}
		)
	</insert>
	
	<!-- 通过ID更新 -->
	<update id="updateByIdSelective" parameterType="com.exiao.platform.core.sys.data.User">
		update sys_user
		<set>
			<if test="password != null">password = #{password},</if>
			<if test="userName != null">user_name = #{userName},</if>
			<if test="confirmPassword != null">confirm_password = #{confirmPassword},</if>
			<if test="email != null">email = #{email},</if>
			<if test="phone!= null">phone = #{phone},</if>
			<if test="mobile != null">mobile = #{mobile},</if>
			<if test="loginIp != null">login_ip = #{loginIp},</if>
			<if test="departmentId != null">deparment_id = #{departmentId},</if>
			<if test="roleID != null">role_id = #{roleID},</if>
			<if test="loginDate != null">login_date = #{loginDate},</if>
			<if test="updateTime != null">update_time = #{updateTime},</if>
			<if test="updateBy != null">update_by = #{updateBy},</if>
			<if test="logicalDel != null">logical_del = #{logicalDel},</if>
			<if test="salt != null">salt = #{salt},</if>
		    <if test="locked != null">locked = #{locked},</if>
			
		</set>
		where id = #{id}
	</update>
	
	<update id="updateById" parameterType="com.exiao.platform.core.sys.data.User">
		update sys_user
		set password = #{password},
		confirm_password = #{confirmPassword},
		user_name = #{userName},
		email = #{email},
		phone = #{phone},
		mobile = #{mobile},
		deparment_id = #{departmentId},
		role_id = #{roleID},
		login_ip = #{loginIp},
		update_by = #{updateBy},
		login_date = #{loginDate},
		update_time = #{updateTime},
		logical_del = #{logicalDel},
		salt=#{salt},
		locked=#{locked}
		where id = #{id}
	</update>
	
	<select id="FINDLIST" resultMap="BaseResultMap">
    <![CDATA[
        select * from sys_user order by id desc  
            limit #{pageNo},#{pageSize}
    ]]>
    </select>
    
    <select id="FINDLIST_COUNT" resultType="int">
    <![CDATA[
        select count(id) from sys_user
    ]]>
    </select>
	

	
</mapper>

